#!/usr/bin/env python
import rospy
from robot_skills.util.entity import Entity
from robot_smach_states import StartChallengeRobust, NavigateToWaypoint, Say, Find, Grab
from robot_smach_states.util import startup
from robot_smach_states.util.designators import EdEntityDesignator, VariableDesignator, EntityByIdDesignator, \
    UnoccupiedArmDesignator
from smach import StateMachine

STARTING_POINT = "initial_pose"

object_type = 'cup'
source_entity = 'dining_table'

EXIT_1 = "exit_1_rips"
EXIT_2 = "exit_2_rips"
EXIT_3 = "exit_3_rips"


class FindObject(StateMachine):
    def __init__(self, robot, item):
        StateMachine.__init__(self, outcomes=['found'])

        source_entity_designator = EdEntityDesignator(robot, id=source_entity)
        description_designator = VariableDesignator({
            'type': 'cup'
        })
        area_name_designator = VariableDesignator('on_top_of')
        navigation_area_designator = VariableDesignator('in_front_of')

        with self:
            StateMachine.add('SAY_LOOKING', Say(robot, ["I'm going to look for the cup"], block=False),
                             transitions={'spoken': 'FIND'})

            StateMachine.add('FIND',
                             Find(robot, source_entity_designator, description_designator, area_name_designator,
                                  navigation_area_designator, item),
                             transitions={'succeeded': 'found',
                                          'inspect_failed': 'found',
                                          'not_found': 'found'})


def setup_statemachine(robot):
    item = VariableDesignator(resolve_type=Entity)

    sm = StateMachine(outcomes=['done'])

    with sm:
        # Start challenge via StartChallengeRobust
        StateMachine.add('START_CHALLENGE_ROBUST',
                         StartChallengeRobust(robot, STARTING_POINT, use_entry_points=True),
                         transitions={'Done': 'FIND_OBJECT',
                                      'Aborted': 'done',
                                      'Failed': 'FIND_OBJECT'})

        StateMachine.add('FIND_OBJECT', FindObject(robot, item),
                         transitions={'found': 'GRAB'})

        arm = UnoccupiedArmDesignator(robot.arms, None)
        StateMachine.add('GRAB', Grab(robot, item, arm),
                         transitions={'done': 'SAY_EXIT',
                                      'failed': 'SAY_EXIT'})

        StateMachine.add('SAY_EXIT', Say(robot, ["I will move to the exit now. See you guys later!"], block=False),
                         transitions={'spoken': 'GO_TO_EXIT'})

        StateMachine.add('GO_TO_EXIT',
                         NavigateToWaypoint(robot, EntityByIdDesignator(robot, id=EXIT_1), radius=0.7),
                         transitions={'arrived': 'done',
                                      'unreachable': 'GO_TO_EXIT_2',
                                      'goal_not_defined': 'GO_TO_EXIT_2'})

        StateMachine.add('GO_TO_EXIT_2',
                         NavigateToWaypoint(robot, EntityByIdDesignator(robot, id=EXIT_2), radius=0.5),
                         transitions={'arrived': 'done',
                                      'unreachable': 'GO_TO_EXIT_3',
                                      'goal_not_defined': 'GO_TO_EXIT_3'})

        StateMachine.add('GO_TO_EXIT_3',
                         NavigateToWaypoint(robot, EntityByIdDesignator(robot, id=EXIT_3), radius=0.5),
                         transitions={'arrived': 'done',
                                      'unreachable': 'done',
                                      'goal_not_defined': 'done'})
    return sm


if __name__ == '__main__':
    rospy.init_node('dishwasher_exec')
    startup(setup_statemachine, challenge_name="rips")
